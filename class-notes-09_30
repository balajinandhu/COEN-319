HW1/Lab1
	Read File fast - read once.
	String search - fixed size

	String to be searched - no \n chars. it is clean - no space, but it can have punctuation
	return:
	Where it is - line #
	How many occurences
	Time => file read and string search
		 => do not time o/p to screen

		Boyer Moore
		Unix cmd: grep - if faster...

	Its okay to use out-of-the box implementation of string search
	Find out if library function is thread-safe

	profile the entire function till printing the o/p

Class:

matrix multiplication:

	for(x=0;x<ROW;x++)
		for(y=0;y<COL;y++)
			R[x]+=A[x][y]*V[x]


can't reduce thread creation time - only run multicore if array is large enough

1 thread per row => 10k threads for 10k row matrix
so, 4 threads per ROW/threads

void* matrix_mul(void *rank){
	int threadID = (int) rank;
	int local_m = (ROW/threads_count);
	int first_row = threadID*local_m;
	int last_row = first_row+local_m;

	for(int i=first_row;x<last_row;i++){	//y is the result array
		y[i] = 0.0;
		for(j=0;j<COLS;j++){
			y[i]+=A[i][j]*x[j];
		}
	}
	return NULL;
}


calculate PI:
PI=4(1-1/3+1/5-1/7+...+[{(-1)^n}/2n+1])

for(n=0;n<10^6;n++){
	sum += pow(1,n)/(2*n+1);
}
pi = 4*sum;

1 thread per n/thread_count
have to ensure threads do same amount of work = load balancing

have to synchronize the global m/y because we have partial PI values from each thread

pthread_lock()
pthread_unlock()

create local variable in each thread to store partial PI
lock and update global sum after all calculation and then unlock => faster

int part_sum;
for(i=first_i;i<last_i;i++,factor=-factor){
	part_sum += factor/(2*i+1);
}
pthread_mutex_lock(&mutex);
sum += part_sum;
pthread_mutex_unlock(&mutex);
